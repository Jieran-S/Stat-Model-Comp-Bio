tinytex::install_tinytex()
install.packages(formatR)
install.packages(formatR)
formatR
install.packages("formatR")
pwd
library(Seurat)
installed.packages("Seurat")
library(Seurat)
installed.packages("Seurat")
install.packages("Seurat")
library(Seurat)
install.packages('lmtest')
library(Seurat)
install.packages('Seurat')
library(Seurat)
library(lmtest)
install.package('lmtest')
install.packages('lmtest')
remove.packages('lmtest')
remove.packages('Seurat')
remove.packages('Seurat',Seurat)
remove.packages('Seurat','Seurat')
remove.packages(Seurat')
remove.packages('Seurat')
dpkg --list
detach("package:Seurat", unload=TRUE)
detach("Seurat", unload=TRUE)
?detach
detach("lmtest", unload=TRUE)
detach(lmtest, unload=TRUE)
library(SeuratObject)
detach("package:SeuratObject", unload = TRUE)
remove.packages("SeuratObject")
install.packages("Seurat")
install.packages("Seurat")
install.packages("lmtest")
install.packages("Seurat")
library(Seurat)
library(Seurat)
counts <- Read10X(data.dir = "data/DS1/")
seurat <- CreateSeuratObject(counts, project = "D1Trail")
counts <- Read10X(data.dir = "data/DS1/")
seurat <- CreateSeuratObject(counts, project = "D1Trail")
counts <- Read10X(data.dir = "data/DS1/")
seurat <- CreateSeuratObject(counts, project = "D1Trail")
getwd()
g <- function(x) median(x)
m <- c(1,2,3,4,5,6)
g(m)
url <- "https://ww2.amstat.org/publications/jse/datasets/fruitfly.dat.txt"
fly.data <- read.table(url)
fly.data <- fly.data[, - c(1,6)]
names(fly.data) <- c("partners","type","longevity","thorax")
pairs(fly.data)
#What is pairs plot?
#What can you comment on based on this graph?
#logic: fitting the model -> Getting beta hat -> Getting sigma_hat -> Using t-test statistics (beta_hat/XTX sigma_hat) compile to t-test with dof n-p
reg.wtho <- lm(fly.onefemale$longevity ~ factor(fly.onefemale$type) + fly.onefemale$thorax)
fly.onefemale <- subset(fly.data, partners == 1)
#logic: fitting the model -> Getting beta hat -> Getting sigma_hat -> Using t-test statistics (beta_hat/XTX sigma_hat) compile to t-test with dof n-p
reg.wtho <- lm(fly.onefemale$longevity ~ factor(fly.onefemale$type) + fly.onefemale$thorax)
reg.wtho <- lm(longevity ~ factor(type) + thorax, data = fly.onefemale)
reg.wtho <- lm(longevity ~ factor(type) + I(thorax^2), data = fly.onefemale)
typeof(predict(reg.wtho, fly.onefemale))
head(predict(reg.wtho, fly.onefemale))
library(BiocManager)
sessionInfo()
library("limma")
library("ggplot2")
library(matrixStats)
library(cowplot)
library(ROCR)
library(magrittr)
library(dplyr)
library("affy")
library(affy)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("affy")
library(affy)
R
sessionInfo()
library(iSEE)
source("https://bioconductor.org/biocLite.R")
biocLite("RnBeads")
BiocManager::install('RnBeads')
wes_palette("Darjeeling1")
library(wesanderson)
library(wesanderson)
wes_palette("Darjeeling1")
print(wes_palette("Darjeeling1"))
list(wes_palette("Darjeeling1"))
m <- list(wes_palette("Darjeeling1"))
m
m <- c(wes_palette("Darjeeling1"))
m
(c(wes_palette("Darjeeling1")))
(c(wes_palette("Darjeeling2")))
wes_palette("Darjeeling2")
wes_palette("Darjeeling1")
wes_palette("Darjeeling2")
c(wes_palette("FantasticFox1"))
wes_palette("Darjeeling1")
c(wes_palette("Cavalcanti1")
)
c(wes_palette("GrandBudapest2"))
gc()
gc()
suppressPackageStartupMessages({
# data manipulation
library(hdf5r)
library(Seurat)
library(readxl)
library(scDblFinder)
library(data.table)
# pipelining
library(tidyverse)
library(dplyr)
#Processing
library(harmony)
# For plotting
library(ggplot2)
library(RColorBrewer)
library(ggsci)
library(wesanderson)
library(patchwork)
library(gridExtra)
})
data_path <- "/Users/jiesun/Storage/Work/Projects/Microglial_annotation/Data/"
working_path <- "/Users/jiesun/Storage/Work/Projects/Microglial_annotation/Microglial-annotation"
setwd(working_path)
# three different samples: 100-WT, 101 - GpnmbKO, 102-GpnmbKO)
seurat_list <- lapply(list.files( data_path, pattern = "*.h5", full.name =TRUE),
function(file){
file_ind <- which(list.files( data_path, pattern = "*.h5", full.name =TRUE) == file)
seurat_object <- Read10X_h5(file , use.names = TRUE, unique.features = TRUE) %>%
CreateSeuratObject(project = c("WT", "GpnmbKO_1", "GpnmbKO_2")[file_ind], min.cells = 3, min.features = 200)
seurat_object$stim <- sprintf("cond%s", file_ind-1)
seurat_object[["percent.mt"]] <- PercentageFeatureSet(seurat_object, pattern = "^mt-")
seurat_object[["percent.rb"]] <- PercentageFeatureSet(seurat_object, pattern = "^Rp[sl]")
seurat_object
})
# Should also remove the doublet cells
seurat_list <- lapply(seurat_list, function(x) rownames(x)) %>%
{Reduce(intersect, .)} %>%
{lapply(seurat_list, function(x) x[.,])}
seurat_combi <- merge(seurat_list[[1]], seurat_list[-1], project = "CombinedSeurat")
VlnPlot(seurat_combi, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
group.by = "orig.ident", cols = pal_npg("nrc")(3),
ncol = 3, pt.size = 0) + xlab("conditions")
seurat_combi <- seurat_combi %>%
NormalizeData() %>%
FindVariableFeatures(nfeatures = 3000) %>%
ScaleData() %>%
RunPCA(npcs = 50)
# Select essential PCs for clustering
pct <- seurat_combi[["pca"]]@stdev / sum(seurat_combi[["pca"]]@stdev) * 100
choice1 <- which(cumsum(pct) > 80 & pct < 5)[1]
choice2 <- sort(which((pct[1:length(pct) - 1] - pct[2:length(pct)]) > 0.1 & cumsum(pct) > 60 ), decreasing = T)[1] + 1
pcs <- min(choice1, choice2, 40)
ElbowPlot(seurat_combi, ndims= 50) + ylab("variance explained (%)") +
geom_point(x = pcs, y = seurat_combi[["pca"]]@stdev[pcs] , colour = "red") +
geom_label(
label=sprintf("PC selected: %1.0f",pcs),
x=pcs,
y=seurat_combi[["pca"]]@stdev[pcs] + 1,
label.padding = unit(0.55, "lines"), # Rectangle size around label
label.size = 0.35,
color = "black",
fill="#69b3a2")
seurat_combi <- seurat_combi %>% RunHarmony(group.by.vars = "orig.ident", dims.use = 1:pcs, max.iter.harmony = 50) %>%
FindNeighbors(reduction = "harmony", dims = 1:pcs) %>% FindClusters(resolution = 0.5)
seurat_combi <- RunUMAP(seurat_combi, reduction = "harmony", dims = 1:pcs)
Plot1 <- DimPlot(seurat_combi, group.by = "seurat_clusters", label = FALSE, label.color = "black", pt.size = 0.3, cols = pal_simpsons()(16))  + plot_annotation(title="Clusters") + NoAxes()
Plot2 <- DimPlot(seurat_combi, group.by = "orig.ident",pt.size = 0.3, cols = pal_simpsons()(3)) +
plot_annotation(title="Conditions") + NoAxes()
Plot1 + Plot2
# Plot abundance of cells in different conditions
ca <- table(cluster=seurat_combi$seurat_clusters, sample=seurat_combi$orig.ident)
ggplot(as.data.frame(ca), aes(sample, cluster, fill=Freq)) +
geom_tile() + scale_fill_gradientn(colors = wes_palette("IsleofDogs2", 10, type = "continuous")) +
geom_text(aes(label=Freq), color = "white") + coord_fixed(ratio = 0.25) +
guides(fill = guide_colourbar(barwidth = 0.5,barheight = 18))
# Bar plot about the percentage in each cluster given the condition
# Import list of marker genes
marker_list <- read_excel(file.path(working_path,"Marker_list_BU.xlsx")) %>% {.[c(4:13)]}
meta_data <- unlist(tstrsplit(marker_list$Meta_data, ":", fixed = T, keep = 2))
names(meta_data) <- unlist(tstrsplit(marker_list$Meta_data, ":", fixed = T, keep = 1))
meta_data <- meta_data[!is.na(meta_data)]
# Filter and leave only those marker genes in the clusters
exist_list <- lapply(marker_list, function(x){
x <- x[!is.na(x)]
x <- unique(grep(paste(x,collapse="|"), row.names(seurat_combi), ignore.case = TRUE, value=TRUE))
x <- row.names(seurat_combi)[grep(paste(x,collapse="|"), row.names(seurat_combi), ignore.case = TRUE)]})
# Overview of the feature genes distribution in the cell population
DoHeatmap(seurat_combi, features = unique(unlist(exist_list)), group.colors = pal_simpsons()(16))
rm(seurat_list)
# Overview of the feature genes distribution in the cell population
DoHeatmap(seurat_combi, features = unique(unlist(exist_list)), group.colors = pal_simpsons()(16))
library(usethis)
usethis::edit_r_environ()
install.packages("usethis")
library(usethis)
usethis::edit_r_environ()
Sys.setenv('R_MAX_VSIZE'=32000000000)
# Overview of the feature genes distribution in the cell population
DoHeatmap(seurat_combi, features = unique(unlist(exist_list)), group.colors = pal_simpsons()(16))
BiocManager::install("mnem")
library(mnem)
matrix(1,2,3,4)
matrix(c(1,2,3,4))
matrix(c(1,2,3,4), c(1,2,3,5))
matrix(c(1,2,3,4), c(1,2,3,5))
sessionInfo()
adjMatU <- matrix(c(1,1,1,0,
0,1,1,1,
0,0,1,1,
0,0,0,1),
nrow = 4, byrow = TRUE)
adjV2 <- matrix(c(1,0,0,0,
1,1,1,0,
1,0,1,0,
1,0,0,1),
nrow = 4, byrow = TRUE)
adjMatU
adjV1 <- matrix(c(1,1,1,0,
0,1,1,1,
0,0,1,0,
0,0,0,1),
nrow = 4, byrow = TRUE)
adjV1
adjV2
c(0.1:0.9)
?seq
library(data.table)
library(mnem)
library(data.table)
adjMatU <- matrix(c(1,1,1,0,
0,1,1,1,
0,0,1,1,
0,0,0,1),
nrow = 4, byrow = TRUE)
adjV1 <- matrix(c(1,1,1,0,
0,1,1,1,
0,0,1,0,
0,0,0,1),
nrow = 4, byrow = TRUE)
adjV2 <- matrix(c(1,0,0,0,
1,1,1,0,
1,0,1,0,
1,0,0,1),
nrow = 4, byrow = TRUE)
endAdj <- list(adjV1, adjV2)
transitionProb <- function(startAdj, endAdjs, lambda){
transProb <- sapply(endAdjs, function(endAdj){
Suv <- sum(abs(endAdj - startAdj))
Tuv <- lambda * ((1 - lambda)^Suv)
})
transPorb <- transProb/sum(transProb)
return(transProb)
}
transProb <- rbindlist(lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
}))
transProb <- lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
})
transProb
transitionProb <- function(startAdj, endAdjs, lambda){
transProb <- sapply(endAdjs, function(endAdj){
Suv <- sum(abs(endAdj - startAdj))
Tuv <- lambda * ((1 - lambda)^Suv)
})
transPorb <- transProb/sum(transProb)
return(as.data.table(transPorb))
}
transProb <- lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
})
transProb <- rbindlist(lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
}))
setnames(transProb, c("V1", "V2"))
transProb
transitionProb <- function(startAdj, endAdjs, lambda){
transProb <- sapply(endAdjs, function(endAdj){
Suv <- sum(abs(endAdj - startAdj))
Tuv <- lambda * ((1 - lambda)^Suv)
})
transPorb <- transProb/sum(transProb)
return(t(transPorb))
}
transProb <- rbindlist(lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
}))
lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
})
transitionProb <- function(startAdj, endAdjs, lambda){
transProb <- sapply(endAdjs, function(endAdj){
Suv <- sum(abs(endAdj - startAdj))
Tuv <- lambda * ((1 - lambda)^Suv)
})
transPorb <- as.data.table(transProb/sum(transProb))
return(t(transPorb))
}
transProb <- rbindlist(lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
}))
lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
})
library(dplyr)
library(mnem)
library(dplyr)
transProb <- lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
})
transProb
transitionProb <- function(startAdj, endAdjs, lambda){
transProb <- sapply(endAdjs, function(endAdj){
Suv <- sum(abs(endAdj - startAdj))
Tuv <- lambda * ((1 - lambda)^Suv)
})
transPorb <- transProb/sum(transProb)
return(transPorb)
}
transProb <- lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
})
transProb
as.data.table(transProb)
as.data.table(t(transProb))
t(as.data.table(transProb)_
t(as.data.table(transProb))
transProb %>% bind_rows()
transProb
transProb <- lapply(seq(0.1, 0.9, by = 0.1), function(lambda){
transitionProb(startAdj = adjMatU, endAdjs = endAdj, lambda = lambda)
}) %>% as.data.frame() %>% t() %>% as.data.table()
transProb
transProb[, lambda := seq(0.1, 0.9, by = 0.1)]
transProb
knitr::kable(transProb)
library(mnem)
library(dplyr)
library(data.table)
library(ggplot2)
ggplot(data = transProb) +
geom_line(aes(x = lambda, y = V1), color = "r") +
geom_line(aes(x = lambda, y = V2), color = "g")
ggplot(data = transProb) +
geom_line(aes(x = lambda, y = V1, col = "V1")) +
geom_line(aes(x = lambda, y = V2, col = "V2"))
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print(rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: /n")
print(rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: \n")
print(rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: ")
print(rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: \n" + rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: \n" & rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: \n" , rho)
print(rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: \n" , rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: /n" , rho)
rho <- matrix(c(1,0,1,0,
0,1,1,1),
nrow = 2, byrow = TRUE)
print("rho: ")
print(rho)
FList <- list()
FList[["K1"]] <- matrix(c(1,0,1,0,
1,1,1,1), nrow = 2, byrow = TRUE)
FList[["K2"]] <- matrix(c(0,1,1,1,
1,1,1,1), nrow = 2, byrow = TRUE)
Flist
FList <- list()
FList[["K1"]] <- matrix(c(1,0,1,0,
1,1,1,1), nrow = 2, byrow = TRUE)
FList[["K2"]] <- matrix(c(0,1,1,1,
1,1,1,1), nrow = 2, byrow = TRUE)
FList
RMat <- as.matrix(cbind(FList$K1[,c(1,2)],
FList$K2[,c(3,4)]))
RMat
RMat <- as.matrix(cbind(FList$K1[,c(1,2)],
FList$K2[,c(3,4)]))
RMat[RMat == 0 ] <- -1
RMat
t(rho) %*% RMat
t(FList$K1) %*% RMat
trace(t(FList$K1) %*% RMat)
tr(t(FList$K1) %*% RMat)
diag(t(FList$K1) %*% RMat)
logList[["K1"]] <- diag(t(FList$K1) %*% RMat)
logList <- list()
logList[["K1"]] <- diag(t(FList$K1) %*% RMat)
logList[["K2"]] <- diag(t(FList$K2) %*% RMat)
logList <- list()
logList[["K1"]] <- diag(t(FList$K1) %*% RMat)
logList[["K2"]] <- diag(t(FList$K2) %*% RMat)
logList
pi <- c(0.44, 0.56)
resp <- rbind(pi[1]*exp(logList$K1),
pi[2]*exp(logList$K2))
resp
resp <- resp/colSums(resp)
resp
typeof(resp)
as.data.frame(resp)/colSums(resp)
resp <- rbind(pi[1]*exp(logList$K1),
pi[2]*exp(logList$K2)) %>% as.data.table()
resp
resp <- resp[, lapply(.SD, x/sum(x)), .SD = colnames(resp)]
resp <- resp[, lapply(.SD, function(x) x/sum(x)), .SD = colnames(resp)]
resp
pi <- c(0.44, 0.56)
resp <- rbind(pi[1]*exp(logList$K1),
pi[2]*exp(logList$K2)) %>% as.data.table()
resp <- resp[, lapply(.SD, function(x) x/sum(x)), .SD = colnames(resp)]
resp
(newWeight <- rowSums(resp)/sum(resp))
setwd("~/Desktop/EthZ/Courses/Sem_4/Statistical_Model_CB/ExerGithub/Project_8_student")
library(universalmotif)
BiocManager::install("universalmotif")
BiocManager::install("epiwraps")
BiocManager::install("motifmatchr")
BiocManager::install("chromVAR")
suppressPackageStartupMessages({
library(epiwraps)
library(motifmatchr)
library(MotifDb)
library(universalmotif)
library(sechm)
library(BiocParallel)
library(ggplot2)
library(chromVAR) # for motif accessibility estimation
library(SummarizedExperiment) # data structure
library(limma) # for statistical analysis
})
BiocManager::install("epiwraps")
setwd("~/Desktop/EthZ/Courses/Sem_4/Statistical_Model_CB/ExerGithub/Project_8_student")
setwd("~/Desktop/EthZ/Courses/Sem_4/Statistical_Model_CB/ExerGithub/Project_9_student")
library(ggplot2)
nvmData <- readRDS("NVM_DAG.rds")
nvmData <- readRDS("NVM_DAG.rds")
list.files()
nvmData <- readRDS("MVN_DAG.rds")
head(nvmData)
head(nvmData)
ggplot(nvmData, aes(x = A, y = B)) + geom_point()
ggplot(nvmData, aes(x = A, y = B)) + geom_point() +
ggtitle("Scatter plot between observation A and B")
?cor.test
cor.test(nvmData$A, nvmData$B)
lm(A ~ C, data = nvmData)
Ares <- residual(lm(A ~ C, data = nvmData))
Ares <- residuals(lm(A ~ C, data = nvmData))
Ares
ggplot(aes(x = Ares, y = Bres)) + geom_point() +
ggtitle("residual relationship between A and B")
ggplot() + geom_point(aes(x = Ares, y = Bres)) +
ggtitle("residual relationship between A and B")
ggplot() + geom_point(aes(x = Ares, y = Bres)) +
ggtitle("residual relationship between A and B")
cbind(Ares, Bres)
Ares <- residuals(lm(A ~ C, data = nvmData))
Bres <- residuals(lm(B ~ C, data = nvmData))
ggplot() + geom_point(aes(x = Ares, y = Bres)) +
ggtitle("residual relationship between A and B")
cor.test(Ares, Bres)
version()
Version()
R.Version()
library(updateR)
